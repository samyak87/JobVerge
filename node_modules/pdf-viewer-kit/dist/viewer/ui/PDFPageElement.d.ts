import { PageViewport } from 'pdfjs-dist';
import { default as CanvasPool } from './CanvasPool';
/**
 * Utility class for managing and creating elements related to rendering PDF pages.
 */
declare class PageElement {
    static gap: number;
    private static _canvasPool;
    /**
     * Initializes PageElement with a CanvasPool instance.
     * Must be called once before using canvas-related methods.
     * @param canvasPoolInstance The global CanvasPool instance.
     */
    static init(canvasPoolInstance: CanvasPool): void;
    /**
     * Creates or updates a container `<div>` element for a PDF page.
     * Intended to be recycled by the PageVirtualization logic.
     *
     * @param pageNumber The page number.
     * @param viewport The viewport of the page.
     * @param pagePositionInfo Map of page numbers to their top positions.
     * @param recycleDiv An optional existing div to reuse.
     * @returns The configured page container element.
     */
    static createOrUpdatePageContainerDiv(pageNumber: number, viewport: PageViewport, pagePositionInfo: Map<number, number>, recycleDiv?: HTMLDivElement): HTMLDivElement;
    /**
     * Retrieves a canvas and its context from the canvas pool for rendering.
     *
     * @param viewport The viewport object representing the page dimensions.
     * @returns A tuple containing the canvas element and its 2D rendering context.
     * @throws If the CanvasPool has not been initialized.
     */
    static getCanvasFromPool(viewport: PageViewport): [HTMLCanvasElement, CanvasRenderingContext2D];
    /**
     * Releases a canvas back to the CanvasPool for reuse.
     *
     * @param canvas The canvas element to release.
     */
    static releaseCanvasToPool(canvas: HTMLCanvasElement): void;
    /**
     * Creates the main container elements required for the PDF viewer.
     * Called once during viewer setup.
     *
     * @param containerId The ID of the parent container where the viewer will be appended.
     * @param scale The initial scale factor.
     * @returns An object with references to the created container elements.
     */
    static containerCreation(containerId: string, scale: number): {
        parent: HTMLDivElement;
        viewerContainer: HTMLDivElement;
        pagesContainer: HTMLDivElement;
        injectElementId: string;
    };
    /**
     * Creates a layer `<div>` element (e.g., text or annotation layer) for a PDF page.
     *
     * @param classNames CSS class names for the layer.
     * @param ids The ID attribute for the layer.
     * @param viewport The viewport defining layer size.
     * @returns The created layer `<div>` element.
     */
    static createLayers(classNames: string, ids: string, viewport: PageViewport): HTMLDivElement;
}
export default PageElement;
