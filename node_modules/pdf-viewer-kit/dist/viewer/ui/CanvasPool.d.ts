/**
 * Manages a pool of reusable HTMLCanvasElement objects to reduce
 * the overhead of creating and destroying canvases frequently.
 */
declare class CanvasPool {
    private _pool;
    private _maxPoolSize;
    constructor(maxPoolSize?: number);
    /**
     * Acquires a canvas from the pool or creates a new one if none are suitable.
     * @param {number} cssWidth - Desired CSS width of the canvas.
     * @param {number} cssHeight - Desired CSS height of the canvas.
     * @returns {[HTMLCanvasElement, CanvasRenderingContext2D]} The canvas and its 2D rendering context.
     */
    getCanvas(cssWidth: number, cssHeight: number): [HTMLCanvasElement, CanvasRenderingContext2D];
    /**
     * Releases a canvas back to the pool.
     * @param {HTMLCanvasElement} canvas - The canvas to release.
     */
    releaseCanvas(canvas: HTMLCanvasElement): void;
    /**
     * Clears the entire pool and removes all canvases.
     * Should be called when the PDF viewer is destroyed.
     */
    destroy(): void;
}
export default CanvasPool;
