import { default as PdfState } from './PDFState';
import { default as PageVirtualization } from './PDFPageVirtualization';
interface ZoomOptions {
    /** Minimum permitted scale. */
    minScale: number;
    /** Maximum permitted scale. */
    maxScale: number;
    /** Increment for each zoom step. */
    zoomStep: number;
}
/**
 * Handles zooming and panning operations for the PDF viewer.
 * Debounces window resize to autoâ€“fit width.
 */
export default class ZoomHandler {
    private _pdfState;
    private _pageVirtualization;
    private _options;
    private _scrollableContainerElement;
    private _onWindowResize;
    /**
     * @param pdfState           Shared PDF state (scale, currentPage, etc.).
     * @param pageVirtualization Manages page measurements and rendering.
     * @param options            Optional zoom limits and step size.
     */
    constructor(pdfState: PdfState, pageVirtualization: PageVirtualization, options?: ZoomOptions);
    private _snapToStep;
    /**
     * Increase zoom by one step, up to the maximum scale.
     */
    zoomIn(): Promise<void>;
    /**
     * Decrease zoom by one step, down to the minimum scale.
     */
    zoomOut(): Promise<void>;
    /**
     * Apply a specific zoom level:
     * - Clamp to [minScale, maxScale]
     * - Preserve scroll position relative to current page
     * - Recalculate page positions
     * - Emit scaleChange
     *
     * @param newScaleInput Desired scale value
     */
    applyZoom(newScaleInput: number): Promise<void>;
    /**
     * Pan the viewer by the given pixel offsets.
     *
     * @param deltaX Horizontal pan in pixels.
     * @param deltaY Vertical pan in pixels.
     */
    pan(deltaX: number, deltaY: number): void;
    /**
     * Zoom so that the widest page fits the container width.
     */
    fitWidth(): Promise<void>;
    /**
     * Reset zoom to 100% (scale = 1.0).
     */
    fitPage(): Promise<void>;
    /**
     * Clean up resources and event listeners.
     */
    destroy(): void;
    /**
     * Compute scrollTop minus the top position of the target page.
     *
     * @param targetPage 1-based page number.
     * @returns Vertical offset in pixels within the page.
     */
    private _getScrollOffsetRelativeToPage;
    /**
     * After zoom change, adjust scrollTop so that the same point remains in view.
     *
     * @param targetPage             Page number to keep in view.
     * @param previousOffset         Offset before zoom.
     * @param previousScale          Scale before zoom.
     * @param newScale               Scale after zoom.
     */
    private _adjustScrollPosition;
    /**
     * Apply CSS scaling via a --scale-factor CSS variable
     * on the main page viewer container.
     *
     * @param scaleFactor New scale value.
     */
    private _applyCssScale;
}
export {};
